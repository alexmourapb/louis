package main

import (
	"bytes"
	"fmt"
	"github.com/KazanExpress/louis/pkg/queue"
	"github.com/streadway/amqp"
	"log"
	"time"
)

func failOnError(err error, msg string) {
	if err != nil {
		log.Fatalf("%s: %s", msg, err)
		panic(fmt.Sprintf("%s: %s", msg, err))
	}
}

func main() {
	conn, err := amqp.Dial("amqp://guest:guest@localhost:5672/")
	failOnError(err, "Failed to connect to RabbitMQ")
	defer conn.Close()

	ch, err := conn.Channel()
	failOnError(err, "Failed to open a channel")
	defer ch.Close()

	q, err := queue.DeclareQueue("hello_queue", ch)
	// q, err := ch.QueueDeclare(
	// 	"hello_queue", // name
	// 	true,          // durable [saved to file]
	// 	false,         // delete when unused
	// 	false,         // exclusive
	// 	false,         // no-wait
	// 	nil,           // arguments
	// )
	failOnError(err, "Failed to declare a queue")

	msgs, err := queue.Consume(ch, q.Name)
	// msgs, err := ch.Consume(
	// 	q.Name, // queue
	// 	"",     // consumer
	// 	false,  // auto-ack
	// 	false,  // exclusive
	// 	false,  // no-local
	// 	false,  // no-wait
	// 	nil,    // args
	// )
	failOnError(err, "Failed to register a consumer")

	// This tells RabbitMQ not to give more than one message
	// to a worker at a time. Or, in other words, don't dispatch
	// a new message to a worker until it has processed and acknowledged
	// the previous one. Instead, it will dispatch it to the next worker that is not still busy.
	queue.SetQos(ch)
	// err = ch.Qos(
	// 	1,     // prefetch count
	// 	0,     // prefetch size
	// 	false, // global
	// )

	forever := make(chan bool)

	go func() {
		for d := range msgs {
			log.Printf("Received a message: %s", d.Body)
			dot_count := bytes.Count(d.Body, []byte("."))
			t := time.Duration(dot_count)
			time.Sleep(t * time.Second)
			log.Printf("Done")
			d.Ack(false)
			// d.Nack(false, true)
		}
	}()

	log.Printf(" [*] Waiting for messages. To exit press CTRL+C")
	<-forever
}
